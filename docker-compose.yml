version: "3.8"

services:
  router_base:
    build:
      context: ./router
      dockerfile: router_base.Dockerfile
    image: router:base
    command: "echo 'router base built'"
    network_mode: none
    restart: "no"

  router:
    build:
      context: ./router
      dockerfile: router.Dockerfile
    container_name: router
    cap_add:
      - NET_ADMIN
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - router_base
    networks:
      servers:
        ipv4_address: 10.0.11.254
      clients:
        ipv4_address: 10.0.10.254
      multicast: {}
    restart: always

  mcproxy:
    build:
      context: ./router
      dockerfile: router.Dockerfile
    container_name: mcproxy
    cap_add:
      - NET_ADMIN
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - router_base
    networks:
      servers:
        ipv4_address: 10.0.11.253
      clients:
        ipv4_address: 10.0.10.253
      multicast: {}
    restart: always

  # Servidores (4 servidores)
  server1:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: server1
    networks:
      servers:
        ipv4_address: 10.0.11.10
    ports:
      - "5001:5001"
    restart: on-failure

  server2:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: server2
    networks:
      servers:
        ipv4_address: 10.0.11.11
    ports:
      - "5002:5001"
    restart: on-failure

  server3:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: server3
    networks:
      servers:
        ipv4_address: 10.0.11.12
    ports:
      - "5003:5001"
    restart: on-failure

  server4:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: server4
    networks:
      servers:
        ipv4_address: 10.0.11.13
    ports:
      - "5004:5001"
    restart: on-failure

  # Clientes (3 clientes)
  client1:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client1
    networks:
      clients: {}
      servers: {}
    ports:
      - "8501:8501"
    restart: on-failure

  client2:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client2
    networks:
      clients: {}
      servers: {}
    ports:
      - "8502:8501"
    restart: on-failure

  client3:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client3
    networks:
      clients: {}
      servers: {}
    ports:
      - "8503:8501"
    restart: on-failure

networks:
  servers:
    name: servers
    driver: bridge
    ipam:
      config:
        - subnet: "10.0.11.0/24"
  clients:
    name: clients
    driver: bridge
    ipam:
      config:
        - subnet: "10.0.10.0/24"
  multicast:
    name: multicast
    driver: bridge
    ipam:
      config:
        - subnet: "172.16.0.0/24"
